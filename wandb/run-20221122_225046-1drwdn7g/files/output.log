/home/guest1/.conda/envs/ellen/lib/python3.7/site-packages/torch/optim/lr_scheduler.py:134: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  "https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate", UserWarning)
create web directory ./checkpoints/ellen_scatteing_test1/web...
learning rate 0.0002000 -> 0.0002000
[ellen]------------------------
[ 0 ], data_A_paths :  ['/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0335.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0353.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0474.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0499.jpg']
/home/guest1/.conda/envs/ellen/lib/python3.7/site-packages/torch/nn/functional.py:3635: UserWarning: Default upsampling behavior when mode=bilinear is changed to align_corners=False since 0.4.0. Please specify align_corners=True if the old behavior is desired. See the documentation of nn.Upsample for details.
  "See the documentation of nn.Upsample for details.".format(mode)
[ellen]------------------------
[ 1 ], data_A_paths :  ['/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0361.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0468.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0554.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0473.jpg']
[ellen]------------------------
[ 2 ], data_A_paths :  ['/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0148.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0386.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0245.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0390.jpg']
[ellen]------------------------
[ 3 ], data_A_paths :  ['/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0221.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0505.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0122.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0021.jpg']
[ellen]------------------------
[ 4 ], data_A_paths :  ['/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0516.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0068.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0144.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0278.jpg']
[ellen]------------------------
[ 5 ], data_A_paths :  ['/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0595.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0079.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0293.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0152.jpg']
[ellen]------------------------
[ 6 ], data_A_paths :  ['/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0185.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0577.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0186.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0400.jpg']
[ellen]------------------------
[ 7 ], data_A_paths :  ['/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0250.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0012.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0059.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0406.jpg']
[ellen]------------------------
[ 8 ], data_A_paths :  ['/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0042.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0252.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0548.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0155.jpg']
[ellen]------------------------
[ 9 ], data_A_paths :  ['/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0454.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0268.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0260.jpg', '/home/guest1/ellen_data/UKB_quality_data2_combined/input_20220623_512_n1000/trainA/0246.jpg']
Traceback (most recent call last):
  File "train.py", line 121, in <module>
    model.optimize_parameters()
  File "/home/guest1/ellen_code/pytorch-CycleGAN-and-pix2pix_ellen/models/cycle_gan_model.py", line 184, in optimize_parameters
    self.forward()      # compute fake images and reconstruction images.
  File "/home/guest1/ellen_code/pytorch-CycleGAN-and-pix2pix_ellen/models/cycle_gan_model.py", line 117, in forward
    self.fake_A = self.netG_B(self.real_B)  # G_B(B)
  File "/home/guest1/.conda/envs/ellen/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/guest1/.conda/envs/ellen/lib/python3.7/site-packages/torch/nn/parallel/data_parallel.py", line 168, in forward
    outputs = self.parallel_apply(replicas, inputs, kwargs)
  File "/home/guest1/.conda/envs/ellen/lib/python3.7/site-packages/torch/nn/parallel/data_parallel.py", line 178, in parallel_apply
    return parallel_apply(replicas, inputs, kwargs, self.device_ids[:len(replicas)])
  File "/home/guest1/.conda/envs/ellen/lib/python3.7/site-packages/torch/nn/parallel/parallel_apply.py", line 78, in parallel_apply
    thread.join()
  File "/home/guest1/.conda/envs/ellen/lib/python3.7/threading.py", line 1044, in join
    self._wait_for_tstate_lock()
  File "/home/guest1/.conda/envs/ellen/lib/python3.7/threading.py", line 1060, in _wait_for_tstate_lock
    elif lock.acquire(block, timeout):
KeyboardInterrupt